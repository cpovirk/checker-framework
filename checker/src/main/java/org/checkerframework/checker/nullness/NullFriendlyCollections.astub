/*
 * This file contains alternative stubs for some JDK collection classes. These
 * stubs permit calls like `map.remove(null, null)`. Permitting such calls is
 * unsound, since they cause some implementations (like ConcurrentHashMap) to
 * throw NullPointerException. However, many other common implementations
 * permit such calls, so some users may wish to sacrifice soundness for
 * convenience.
 *
 * To learn how to use this file, see section 30.5.1 of the manual.
 *
 * For further discussion of the challenges presented by Java's mix of
 * null-friendly and null-hostile collections, see issue #3040.
 */

package java.util;

import java.util.Map;
import org.checkerframework.checker.nullness.qual.EnsuresKeyForIf;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.dataflow.qual.*;
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.framework.qual.Covariant;

public interface Deque<E> extends Queue<E> {
  boolean removeFirstOccurrence(@Nullable Object a1);

  boolean removeLastOccurrence(@Nullable Object a1);

  /*
   * The following are currently redundant with our normal JDK stubs. However,
   * the normal stubs may change in the future to reject null.
   */

  boolean remove(@Nullable Object a1);

  @Pure
  boolean contains(@Nullable Object a1);
}

/*
 * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
@Covariant(0)
public interface Map<K, V> {
  V getOrDefault(@Nullable Object key, V defaultValue);

  boolean remove(@Nullable Object key, @Nullable Object value);

  /*
   * The following are currently redundant with our normal JDK stubs. However,
   * the normal stubs may change in the future to reject null.
   */

  @Pure
  @EnsuresKeyForIf(result = true, expression = "#1", map = "this")
  boolean containsKey(@Nullable Object key);

  @Pure
  boolean containsValue(@Nullable Object value);

  @Pure
  @Nullable
  V get(@Nullable Object key);

  @Nullable
  V remove(@Nullable Object key);
}

package java.util.concurrent;

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file is available under and governed by the GNU General Public
 * License version 2 only, as published by the Free Software Foundation.
 * However, the following notice accompanied the original version of this
 * file:
 *
 * Written by Doug Lea with assistance from members of JCP JSR-166
 * Expert Group and released to the public domain, as explained at
 * http://creativecommons.org/publicdomain/zero/1.0/
 */
public interface ConcurrentMap<K extends @NonNull Object, V extends @NonNull Object>
    extends Map<K, V> {
  boolean remove(@Nullable Object key, @Nullable Object value);
}
